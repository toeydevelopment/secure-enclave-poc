//
// Copyright 2018 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo.sgx;

import "asylo/identity/platform/sgx/code_identity.proto";
import "asylo/identity/platform/sgx/sgx_identity.proto";
import "asylo/identity/sealing/sealed_secret.proto";

message HardwareInfo {}

message TestDataRecordHeader {
  enum EnclaveType {
    UNKNOWN_ENCLAVE_TYPE = 0;
    SGX_HARDWARE = 1;
    SGX_SIM = 2;
    FAKE_ENCLAVE = 3;
  }

  // Local time when the record was created. This field is for
  // documentation-purposes only.
  optional string creation_time = 1;

  // Change id from which the tool that generated this record was built. This
  // field is for documentation-purposes only.
  optional uint64 change_id = 2;

  // Type of enclave that generated this record.
  optional EnclaveType enclave_type = 3;

  // Additional information about the hardware that generated this record,
  // if enclave_type is SGX_HARDWARE.
  optional HardwareInfo hardware_info = 4;

  // The code identity of the sealed secret. Deprecated in favour of using the
  // |sgx_identity| field instead.
  optional CodeIdentity enclave_identity = 5 [deprecated = true];

  // SGX identity of the enclave that generated this record.
  optional SgxIdentity sgx_identity = 6;
}

message TestDataRecord {
  // Record header that contains bookkeeping information.
  optional TestDataRecordHeader header = 1;

  // Sealed secret.
  optional SealedSecret sealed_secret = 2;

  // Plaintext of the secret that is wrapped in the sealed secret.
  optional string plaintext = 3;
}

message LocalSecretSealerTestData {
  repeated TestDataRecord records = 1;
}
