//
// Copyright 2018 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo;

import "asylo/enclave.proto";

// Input to a system call test case, specifying the test to run and parameters
// (if applied) to pass.
message SyscallsTestInput {
  // The target syscall under test.
  required string test_target = 1;

  // Used by IO related syscalls.
  optional string path_name = 2;

  // Used by syscalls that accept a buffer.
  optional bool provide_buffer = 3;

  // Used by syscalls that accept a buffer.
  optional int32 buffer_size = 4;
}

// The output contains the outputs from the syscalls inside enclave.
message SyscallsTestOutput {
  // Integer-type value returned by system call.
  optional int64 int_syscall_return = 1;

  // String value from system call.
  optional string string_syscall_return = 2;

  // Bit mask from system call.
  repeated uint64 bit_mask_syscall_outptr = 3;

  enum ErrnoValue {
    UNSUPPORTED = 0;
    ERRNO_ZERO = 1;
    ERRNO_EINVAL = 2;
  }

  // Value of |errno| from system call.
  optional ErrnoValue errno_syscall_value = 4;

  message StatValue {
    optional int64 st_dev = 1;
    optional int64 st_ino = 2;
    optional int64 st_mode = 3;
    optional int64 st_nlink = 4;
    optional int64 st_uid = 5;
    optional int64 st_gid = 6;
    optional int64 st_rdev = 7;
    optional int64 st_size = 8;
    optional int64 st_atime_val = 9;
    optional int64 st_mtime_val = 10;
    optional int64 st_ctime_val = 11;
    optional int64 st_blksize = 12;
    optional int64 st_blocks = 13;
  }

  // Stat struct value from system call.
  optional StatValue stat_buffer_syscall_return = 5;

  // A serialization of a dynamically allocated structure returned/modified
  // by a system call e.g. a linked list.
  optional bytes serialized_proto_return = 6;

  message UtsName {
    optional string sysname = 1;
    optional string nodename = 2;
    optional string release = 3;
    optional string version = 4;
    optional string machine = 5;
    optional string domainname = 6;
  }

  // Value of struct utsname from system call.
  optional UtsName utsname_syscall_return = 7;

  message PassWd {
    optional string pw_name = 1;
    optional string pw_passwd = 2;
    optional int64 pw_uid = 3;
    optional int64 pw_gid = 4;
    optional string pw_gecos = 5;
    optional string pw_dir = 6;
    optional string pw_shell = 7;
  }

  // Value of struct passwd from system call.
  optional PassWd passwd_syscall_return = 8;
}

extend EnclaveInput {
  optional SyscallsTestInput syscalls_test_input = 168889258;
}

extend EnclaveOutput {
  optional SyscallsTestOutput syscalls_test_output = 168889258;
}
