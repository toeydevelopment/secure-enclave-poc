//
// Copyright 2018 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo;

import "asylo/enclave.proto";

// A snapshot layout entry message that contains the base address and size of
// the ciphertext and nonce.
message SnapshotLayoutEntry {
  // Start address of the ciphertext in the snapshot.
  optional uint64 ciphertext_base = 1;

  // Size of the ciphertext in the snapshot.
  optional uint64 ciphertext_size = 2;

  // Start address of the nonce in the snapshot.
  optional uint64 nonce_base = 3;

  // Size of the nonce in the snapshot.
  optional uint64 nonce_size = 4;
}

// A snapshot layout message that contains the base address and size of the
// following: enclave's data section, enclave's bss section, enclave heap,
// and stack for the enclave thread that took the snapshot.
message SnapshotLayout {
  // The encrypted enclave data section in the snapshot.
  repeated SnapshotLayoutEntry data = 1;

  // The encrypted enclave bss section in the snapshot.
  repeated SnapshotLayoutEntry bss = 2;

  // The encrypted enclave heap in the snapshot.
  repeated SnapshotLayoutEntry heap = 3;

  // The encrypted enclave thread related information the snapshot.
  repeated SnapshotLayoutEntry thread = 4;

  // The encrypted stack for the calling thread in the snapshot.
  repeated SnapshotLayoutEntry stack = 5;
}

// A handshake input message that contains the socket used for communication,
// and whether it's a parent or child enclave.
message ForkHandshakeConfig {
  // Specifies whether it is a handshake from the parent enclave side or child
  // enclave side.
  optional bool is_parent = 1;
  // File descriptor of the socket. Acts as the communication channel for the
  // handshake.
  optional int32 socket = 2;
}

// A message containing an ecrypted snapshot key ciphertext and the nonce.
message EncryptedSnapshotKey {
  // The ciphertext bytes of the encrypted snapshot key.
  optional bytes ciphertext = 1;
  // The nonce bytes of the encrypted snapshot key.
  optional bytes nonce = 2;
}

extend EnclaveOutput {
  optional SnapshotLayout snapshot = 238362825;
}
