//
// Copyright 2019 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo.sgx;

import "asylo/enclave.proto";
import "asylo/identity/identity.proto";
import "asylo/identity/platform/sgx/sgx_identity.proto";

extend EnclaveConfig {
  optional SgxRemoteAssertionGeneratorTestEnclaveConfig
      sgx_remote_assertion_generator_test_enclave_config = 282788784;
}

extend EnclaveInput {
  optional SgxRemoteAssertionGeneratorTestEnclaveInput
      sgx_remote_assertion_generator_test_enclave_input = 282788784;
}

extend EnclaveOutput {
  optional SgxRemoteAssertionGeneratorTestEnclaveOutput
      sgx_remote_assertion_generator_test_enclave_output = 282788784;
}

message SgxSelfIdentityInput {}

message SgxSelfIdentityOutput {
  optional SgxIdentity identity = 1;
}

message ResetGeneratorInput {}

message ResetGeneratorOutput {}

message InitializeInput {
  optional bytes config = 1;
}

message InitializeOutput {}

message IsInitializedInput {}

message IsInitializedOutput {
  optional bool is_initialized = 1;
}

message CreateAssertionOfferInput {}

message CreateAssertionOfferOutput {
  optional AssertionOffer offer = 1;
}

message CanGenerateInput {
  optional AssertionRequest request = 1;
}

message CanGenerateOutput {
  optional bool can_generate = 1;
}

message GenerateInput {
  optional string user_data = 1;
  optional AssertionRequest request = 2;
}

message GenerateOutput {
  optional Assertion assertion = 1;
}

message SgxRemoteAssertionGeneratorTestEnclaveConfig {
  // Describes the type of assertion generator to initialize for tests.
  optional AssertionDescription description = 1;
}

// Declare which generator method to call from within the enclave.
message SgxRemoteAssertionGeneratorTestEnclaveInput {
  oneof input {
    SgxSelfIdentityInput sgx_self_identity_input = 1;
    ResetGeneratorInput reset_generator_input = 2;
    InitializeInput initialize_input = 3;
    IsInitializedInput is_initialized_input = 4;
    CreateAssertionOfferInput create_assertion_offer_input = 5;
    CanGenerateInput can_generate_input = 6;
    GenerateInput generate_input = 7;
  }
}

message SgxRemoteAssertionGeneratorTestEnclaveOutput {
  oneof output {
    SgxSelfIdentityOutput sgx_self_identity_output = 1;
    ResetGeneratorOutput reset_generator_output = 2;
    InitializeOutput initialize_output = 3;
    IsInitializedOutput is_initialized_output = 4;
    CreateAssertionOfferOutput create_assertion_offer_output = 5;
    CanGenerateOutput can_generate_output = 6;
    GenerateOutput generate_output = 7;
  }
}
