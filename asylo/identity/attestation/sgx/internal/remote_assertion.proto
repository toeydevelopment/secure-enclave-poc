//
// Copyright 2018 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo.sgx;

import "asylo/crypto/algorithms.proto";
import "asylo/crypto/certificate.proto";
import "asylo/crypto/keys.proto";
import "asylo/identity/platform/sgx/sgx_identity.proto";

// Contains the additional information necessary for generating a remote
// assertion. This proto is serialized into the |additional_information| field
// of the AssertionRequest proto.
message RemoteAssertionRequestAdditionalInfo {
  // The root CA certificates associated with the request. An assertion request
  // is acceptable to a peer if its peer can present an assertion that is
  // rooted back to all CAs contained in |root_ca_certificates|.
  repeated Certificate root_ca_certificates = 1;
}

// Contains the additional information necessary to determine whether a
// participant can verify the remote assertion generated by this
// RemoteAssertionGenerator. This proto is serialized into the
// |additional_information| field of the AssertionOffer proto.
message RemoteAssertionOfferAdditionalInfo {
  // The root CA certificates associated with the offer. An offer is acceptable
  // to a peer if |root_ca_certificates| is a superset of the CAs that that peer
  // trusts.
  repeated Certificate root_ca_certificates = 1;
}

// A payload that is serialized and signed to produce an SGX remote assertion.
message RemoteAssertionPayload {
  // Indicates the version of the assertion format.
  optional string version = 1;

  // Indicates the signature scheme used to sign this payload.
  optional SignatureScheme signature_scheme = 2;

  // The asserted SGX identity.
  optional SgxIdentity identity = 3;

  // Additional binding data associated with the assertion.
  optional bytes user_data = 4;
}

// Defines an SGX remote assertion; a cryptographically-verifiable statement of
// an SGX identity that can be verified by a remote verifier.
message RemoteAssertion {
  // A serialized RemoteAssertionPayload, which contains an SGX identity as well
  // as any additional binding data associated with an assertion of that
  // identity.
  //
  // The RemoteAssertionPayload is provided in its serialized form so that the
  // verifier knows exactly which bytes were signed. Since protobuf
  // serialization is not required to be deterministic, a single protobuf might
  // in principle have multiple serializations. In order to avoid ambiguity
  // about what message was signed, the exact bytes must be provided explicitly.
  optional bytes payload = 1;

  // The verifying key information to verify |signature|.
  optional AsymmetricSigningKeyProto verifying_key = 2;

  // A signature over |payload| that can be verified with |verifying_key|.
  optional bytes signature = 3;

  // One or more certificate chains that certify |verifying_key| and can be used
  // to verify the authenticity of |signature|.
  repeated CertificateChain certificate_chains = 4;
}
