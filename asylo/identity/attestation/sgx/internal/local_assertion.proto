//
// Copyright 2018 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo.sgx;

// Contains the additional information necessary for generating a local
// assertion. This proto is serialized into the |additional_infomation| field of
// the asylo.AssertionRequest proto.
message LocalAssertionRequestAdditionalInfo {
  // Local attestation domain for the peer making the request.
  // |local_attestation_domain| is a 16-byte opaque string indicating the local
  // attestation domain of the peer making this request. A peer receiving this
  // request can honor this request only if it belongs to the same local
  // attestation domain.
  optional bytes local_attestation_domain = 1;

  // Holds the memory-contents of the SGX TARGETINFO structure that describes
  // the SGX enclave requesting the assertion. Note that, since the
  // layout/endianness of the TARGETINFO structure is defined by the Intel
  // architecture, it is OK to store/restore TARGETINFO to/from a byte-string.
  optional bytes targetinfo = 2;
}

// Contains the additional information necessary to determine whether a
// participant can verify the local assertion generated by this
// LocalAssertionGenerator. This proto is serialized into the
// |additional_infomation| field of the asylo.AssertionOffer proto.
message LocalAssertionOfferAdditionalInfo {
  // Local attestation domain for the peer making the offer.
  // |local_attestation_domain| is a 16-byte opaque string indicating the local
  // attestation domain of the peer making this offer. A peer receiving this
  // offer can verify a pursuant assertion only if it belongs to the same
  // local attestation domain.
  optional bytes local_attestation_domain = 1;
}

// Contains the cryptographically verifiable portion of the local assertion.
// Contents of this proto are serialized into the |assertion| field of the
// asylo.Assertion proto.
message LocalAssertion {
  // Holds the memory-contents of the SGX REPORT structure. Note that, since the
  // layout/endianness of the REPORT structure is defined by the Intel
  // architecture, it is OK to store/restore REPORT to/from a byte-string.
  optional bytes report = 1;
}
